<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository  -->
    </parent>
    <groupId>com.nsoft</groupId>
    <artifactId>gkzp</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging><!--mvn package 打包方式，  jar为jar包   war 为war包（由于采用web3.0 规范，是没有web.xml 的，需另行配置（别忘了servlet））-->
    <name>gzy-gkzp</name>
    <description>广职院-公开招聘系统网站</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version><!--JDK版本1.8-->
        <skipTests>true</skipTests> <!--mvn命令打包跳过test-->
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId><!--springboot Web 依赖-->
            <exclusions>
                <exclusion> <!--由于我下面引入了log4j2日志框架来管理日志输出，所以要去掉spring默认自带的日志依赖spring-boot-starter-logging，否则导致冲突即配置log4j2时不生效-->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency><!-- 引入log4j2依赖 -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId><!--没写版本号。直接依赖parent-->
        </dependency>

        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId><!--sqlserver依赖  驱动jar-->
            <scope>runtime</scope>
            <version>6.4.0.jre8</version>
        </dependency>
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>sqljdbc4</artifactId>
            <version>4.0</version>
            <!--            <scope>test</scope>-->
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId><!--mybatis 依赖-->
            <version>2.1.0</version>
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId><!--mybatis分页插件-->
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.3</version><!--注意版本-->
        </dependency>

        <!-- 通用mapper   用于mabatis封装的基础增删改查的功能-->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>2.1.5</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-jdbc</artifactId><!--已引入了这个，故此处例外掉其默认自带的-->
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 逆向工程 -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.5</version>
        </dependency>


        <dependency><!--druid连接池-->
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.17</version>
        </dependency>
        <dependency><!--redis依赖包 --><!--spring boot 与redis应用基本环境配置 -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <exclusions>
                <exclusion> <!--由于我下面引入了log4j2日志框架来管理日志输出，所以要去掉spring默认自带的日志依赖spring-boot-starter-logging，否则导致冲突即配置log4j2时不生效-->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency><!--spring-session依赖包 --><!--spring session 与redis应用基本环境配置,需要开启redis后才可以使用，不然启动Spring boot会报错 -->
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>


        <dependency>
            <groupId>org.json</groupId> <!--json IN JAVA-->
            <artifactId>json</artifactId>
            <version>20180813</version>
        </dependency>
        <dependency>
            <groupId>net.sf.json-lib</groupId><!--json-lib-->
            <artifactId>json-lib</artifactId>
            <classifier>jdk15</classifier>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.83</version>
        </dependency>



<!--
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j-log4j12-version}</version>
        </dependency>
-->



<!--*************************前期上面是必备的，下面的后面再调**********************************-->
<!--
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
 -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <!--    <scope>provided</scope>   --> <!--SpringBoot内置tomcat默认不支持JSP。故在用内置tomcat时为了支持JSP需引入此依赖。  外置tomcat有此jar，故不需要再引入此依赖，此时加上provided参数即可，否则jar冲突-->
            <version>9.0.21</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId><!--jsp标签库-->
            <version>1.2</version>
        </dependency>

        <dependency><!--发送邮件-->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>1.5</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId><!--tomcat依赖 内置tomcat-->
<!--            <scope>provided</scope>-->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId><!--devtools工具依赖，内置tomcat可实现热部署-->
            <scope>provided</scope><!--maven的scope参数含义： compile:编译时依赖（默认） provided:类似compile,需要额外提供的依赖  runtime:运行时依赖  test:测试时依赖（不会随项目发布）    system:类似provided，需要显式提供包含依赖的jar（不推荐使用）   《打war包时：compile和runtime两种依赖打包时会打进去，provided、system、test都不会打进去》-->
            <optional>true</optional><!--maven的optional:true   默认为false，有传递性..   为true时表示此依赖不会产生传递依赖   eg：A依赖B，B依赖C, 在B项目配置中引入C依赖时加上<optional>true</optional>；这样在A项目引入B依赖时就不会连带着把C引进来了,否则会把C依赖jar引进了-->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId><!--测试依赖-->
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId><!--要通过maven进行打包操作 需要这个插件-->
                <configuration>
                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
                </configuration>
            </plugin>
        </plugins>
    </build>




</project>
